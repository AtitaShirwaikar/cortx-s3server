diff --git a/src/main/cpp/fileappender.cpp b/src/main/cpp/fileappender.cpp
index b83f0e1..f429df6 100644
--- a/src/main/cpp/fileappender.cpp
+++ b/src/main/cpp/fileappender.cpp
@@ -15,6 +15,10 @@
  * limitations under the License.
  */
 
+#include <iostream>
+#include <string.h>
+#include <algorithm>
+#include <unistd.h>
 #include <log4cxx/logstring.h>
 #include <log4cxx/fileappender.h>
 #include <log4cxx/helpers/stringhelper.h>
@@ -28,6 +32,7 @@
 #include <log4cxx/helpers/bytebuffer.h>
 #include <log4cxx/helpers/synchronized.h>
 
+
 using namespace log4cxx;
 using namespace log4cxx::helpers;
 using namespace log4cxx::spi;
@@ -126,6 +131,21 @@ void FileAppender::setOption(const LogString& option,
 		LOCK_W sync(mutex);
 		fileName = stripDuplicateBackslashes(value);
 	}
+	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("FILEPERMISSIONS"), LOG4CXX_STR("filepermissions")))
+	{
+		LOCK_W sync(mutex);
+		filePermissions = value;
+	}
+	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("FILEOWNER"), LOG4CXX_STR("fileowner")))
+	{
+		LOCK_W sync(mutex);
+		fileOwner = value;
+	}
+	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("FILEGROUP"), LOG4CXX_STR("filegroup")))
+	{
+		LOCK_W sync(mutex);
+		fileGroup = value;
+	}
 	else if (StringHelper::equalsIgnoreCase(option, LOG4CXX_STR("APPEND"), LOG4CXX_STR("append")))
 	{
 		LOCK_W sync(mutex);
@@ -156,7 +176,6 @@ void FileAppender::activateOptions(Pool& p)
 {
 	LOCK_W sync(mutex);
 	int errors = 0;
-
 	if (!fileName.empty())
 	{
 		try
@@ -186,8 +205,50 @@ void FileAppender::activateOptions(Pool& p)
 	{
 		WriterAppender::activateOptions(p);
 	}
+
 }
 
+    /**
+		The <b>filePermissions</b> property takes a string value which should be the
+		permissions of the log file to be generated & will return its octal equivalent.
+
+		Note: A filePermissions `rw-r--r--` returns a octal equivalent of 644
+		i.e S_IROTH | S_IRGRP | S_IRUSR | S_IWUSR.
+    */
+
+mode_t FileAppender::convert_fileperm_to_chmode(std::string filePermissions)
+{
+	mode_t file_mode = 0;
+	for(int user_counter = 0; user_counter < 3; user_counter++){
+		if(filePermissions[user_counter]=='r' && user_counter==0){
+            file_mode = (file_mode | S_IRUSR);
+		} else if(filePermissions[user_counter]=='w' && user_counter==1){
+            file_mode = (file_mode | S_IWUSR);
+		} else if(filePermissions[user_counter]=='x' && user_counter==2){
+            file_mode = (file_mode | S_IXUSR);
+		}
+	}
+
+	for(int group_counter = 3; group_counter < 6 ;group_counter++){
+		if(filePermissions[group_counter]=='r' && group_counter==3){
+            file_mode = (file_mode | S_IRGRP);
+		} else if(filePermissions[group_counter]=='w' && group_counter==4){
+            file_mode = (file_mode | S_IWGRP);
+		} else if(filePermissions[group_counter]=='x' && group_counter==5){
+            file_mode = (file_mode | S_IXGRP);
+		}
+	}
+	for(int other_counter = 6; other_counter < 8; other_counter++){
+		if(filePermissions[other_counter]=='r' && other_counter==6){
+            file_mode = (file_mode | S_IROTH);
+		} else if(filePermissions[other_counter]=='w' && other_counter==7){
+            file_mode = (file_mode | S_IWOTH);
+		} else if(filePermissions[other_counter]=='x' && other_counter==8){
+            file_mode = (file_mode | S_IXOTH);
+		}
+	}
+    return file_mode;
+}
 
 /**
  * Replaces double backslashes (except the leading doubles of UNC's)
@@ -304,7 +365,37 @@ void FileAppender::setFile(
 
 	try
 	{
+		FILE *fp;
+		// OwnerID = 0 & GroupID = 0 corresponding to 'root' account
+		int ownerid = 0, groupid = 0;
 		outStream = new FileOutputStream(filename, append1);
+		if ( ! filePermissions.empty()){
+		    mode_t file_mode = convert_fileperm_to_chmode(filePermissions);
+		    chmod(filename.c_str(), file_mode);
+		}
+		if ( ! fileOwner.empty()){
+			std::string fileowner_str = "id -u " + fileOwner;
+			char fileowner[fileowner_str.size() + 1], result[10];
+			strcpy(fileowner, fileowner_str.c_str());
+
+			fp = popen( fileowner, "r");
+			while (fgets( result, sizeof(result), fp) != NULL) {
+				ownerid = atoi(result);
+			}
+			pclose(fp);
+		}
+		if ( ! fileGroup.empty()){
+			std::string filegroup_str = "id -u " + fileGroup;
+			char filegroup[filegroup_str.size() + 1], result[10];
+			strcpy(filegroup, filegroup_str.c_str());
+
+			fp = popen( filegroup, "r");
+			while (fgets( result, sizeof(result), fp) != NULL) {
+				groupid = atoi(result);
+			}
+			pclose(fp);
+		}
+		chown(filename.c_str(), ownerid, groupid);
 	}
 	catch (IOException& ex)
 	{
@@ -355,6 +446,5 @@ void FileAppender::setFile(
 	this->fileName = filename;
 	this->bufferSize = bufferSize1;
 	writeHeader(p);
-
 }
 
diff --git a/src/main/include/log4cxx/fileappender.h b/src/main/include/log4cxx/fileappender.h
index 468f135..5274be1 100644
--- a/src/main/include/log4cxx/fileappender.h
+++ b/src/main/include/log4cxx/fileappender.h
@@ -18,6 +18,7 @@
 #ifndef _LOG4CXX_FILE_APPENDER_H
 #define _LOG4CXX_FILE_APPENDER_H
 
+#include <sys/stat.h>
 #include <log4cxx/logger.h>
 #include <log4cxx/logstring.h>
 #include <log4cxx/writerappender.h>
@@ -62,6 +63,18 @@ class LOG4CXX_EXPORT FileAppender : public WriterAppender
 		How big should the IO buffer be? Default is 8K. */
 		int bufferSize;
 
+	    /**
+		FilePermissions for the log files Default is rw-r--r-- . */
+		std::string filePermissions;
+
+		/**
+		Owner for the log files Default is root . */
+		std::string fileOwner;
+
+		/**
+		FileGroup for the log files Default is root . */
+		std::string fileGroup;
+
 	public:
 		DECLARE_LOG4CXX_OBJECT(FileAppender)
 		BEGIN_LOG4CXX_CAST_MAP()
@@ -122,6 +135,9 @@ class LOG4CXX_EXPORT FileAppender : public WriterAppender
 		#activateOptions is called, not when the options are set.  */
 		virtual void setFile(const LogString& file);
 
+		/** Returns the mode_t equivalent for file permissions */
+		mode_t convert_fileperm_to_chmode(std::string filePermissions);
+
 		/**
 		Sets and <i>opens</i> the file where the log output will
 		go. The specified file must be writable.
@@ -158,6 +174,7 @@ class LOG4CXX_EXPORT FileAppender : public WriterAppender
 			return fileName;
 		}
 
+
 		/**
 		<p>Sets and <i>opens</i> the file where the log output will
 		go. The specified file must be writable.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mero_object_header.proto

// To keep mero rules
#pragma once
#ifndef __MERO_FE_S3_SERVER_MERO_OBJECT_HEADER_PB_H__
#define __MERO_FE_S3_SERVER_MERO_OBJECT_HEADER_PB_H__


#ifndef PROTOBUF_mero_5fobject_5fheader_2eproto__INCLUDED
#define PROTOBUF_mero_5fobject_5fheader_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace s3server {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mero_5fobject_5fheader_2eproto();
void protobuf_AssignDesc_mero_5fobject_5fheader_2eproto();
void protobuf_ShutdownFile_mero_5fobject_5fheader_2eproto();

class MeroObjectHeader;

// ===================================================================

class MeroObjectHeader : public ::google::protobuf::Message {
 public:
  MeroObjectHeader();
  virtual ~MeroObjectHeader();

  MeroObjectHeader(const MeroObjectHeader& from);

  inline MeroObjectHeader& operator=(const MeroObjectHeader& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MeroObjectHeader& default_instance();

  void Swap(MeroObjectHeader* other);

  // implements Message ----------------------------------------------

  inline MeroObjectHeader* New() const { return New(NULL); }

  MeroObjectHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MeroObjectHeader& from);
  void MergeFrom(const MeroObjectHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MeroObjectHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 object_size = 1;
  void clear_object_size();
  static const int kObjectSizeFieldNumber = 1;
  ::google::protobuf::uint64 object_size() const;
  void set_object_size(::google::protobuf::uint64 value);

  // optional string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:s3server.MeroObjectHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 object_size_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mero_5fobject_5fheader_2eproto();
  friend void protobuf_AssignDesc_mero_5fobject_5fheader_2eproto();
  friend void protobuf_ShutdownFile_mero_5fobject_5fheader_2eproto();

  void InitAsDefaultInstance();
  static MeroObjectHeader* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MeroObjectHeader

// optional fixed64 object_size = 1;
inline void MeroObjectHeader::clear_object_size() {
  object_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MeroObjectHeader::object_size() const {
  // @@protoc_insertion_point(field_get:s3server.MeroObjectHeader.object_size)
  return object_size_;
}
inline void MeroObjectHeader::set_object_size(::google::protobuf::uint64 value) {
  
  object_size_ = value;
  // @@protoc_insertion_point(field_set:s3server.MeroObjectHeader.object_size)
}

// optional string version = 2;
inline void MeroObjectHeader::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MeroObjectHeader::version() const {
  // @@protoc_insertion_point(field_get:s3server.MeroObjectHeader.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MeroObjectHeader::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s3server.MeroObjectHeader.version)
}
inline void MeroObjectHeader::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s3server.MeroObjectHeader.version)
}
inline void MeroObjectHeader::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s3server.MeroObjectHeader.version)
}
inline ::std::string* MeroObjectHeader::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:s3server.MeroObjectHeader.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MeroObjectHeader::release_version() {
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MeroObjectHeader::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:s3server.MeroObjectHeader.version)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace s3server

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mero_5fobject_5fheader_2eproto__INCLUDED
#endif  // __MERO_FE_S3_SERVER_MERO_OBJECT_HEADER_PB_H__

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mero_object_header.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mero_object_header.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace s3server {

namespace {

const ::google::protobuf::Descriptor* MeroObjectHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeroObjectHeader_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mero_5fobject_5fheader_2eproto() {
  protobuf_AddDesc_mero_5fobject_5fheader_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mero_object_header.proto");
  GOOGLE_CHECK(file != NULL);
  MeroObjectHeader_descriptor_ = file->message_type(0);
  static const int MeroObjectHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeroObjectHeader, object_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeroObjectHeader, version_),
  };
  MeroObjectHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MeroObjectHeader_descriptor_,
      MeroObjectHeader::default_instance_,
      MeroObjectHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(MeroObjectHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeroObjectHeader, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeroObjectHeader, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mero_5fobject_5fheader_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MeroObjectHeader_descriptor_, &MeroObjectHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mero_5fobject_5fheader_2eproto() {
  delete MeroObjectHeader::default_instance_;
  delete MeroObjectHeader_reflection_;
}

void protobuf_AddDesc_mero_5fobject_5fheader_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030mero_object_header.proto\022\010s3server\"8\n\020"
    "MeroObjectHeader\022\023\n\013object_size\030\001 \001(\006\022\017\n"
    "\007version\030\002 \001(\tb\006proto3", 102);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mero_object_header.proto", &protobuf_RegisterTypes);
  MeroObjectHeader::default_instance_ = new MeroObjectHeader();
  MeroObjectHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mero_5fobject_5fheader_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mero_5fobject_5fheader_2eproto {
  StaticDescriptorInitializer_mero_5fobject_5fheader_2eproto() {
    protobuf_AddDesc_mero_5fobject_5fheader_2eproto();
  }
} static_descriptor_initializer_mero_5fobject_5fheader_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int MeroObjectHeader::kObjectSizeFieldNumber;
const int MeroObjectHeader::kVersionFieldNumber;
#endif  // !_MSC_VER

MeroObjectHeader::MeroObjectHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:s3server.MeroObjectHeader)
}

void MeroObjectHeader::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MeroObjectHeader::MeroObjectHeader(const MeroObjectHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:s3server.MeroObjectHeader)
}

void MeroObjectHeader::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  object_size_ = GOOGLE_ULONGLONG(0);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MeroObjectHeader::~MeroObjectHeader() {
  // @@protoc_insertion_point(destructor:s3server.MeroObjectHeader)
  SharedDtor();
}

void MeroObjectHeader::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MeroObjectHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeroObjectHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeroObjectHeader_descriptor_;
}

const MeroObjectHeader& MeroObjectHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mero_5fobject_5fheader_2eproto();
  return *default_instance_;
}

MeroObjectHeader* MeroObjectHeader::default_instance_ = NULL;

MeroObjectHeader* MeroObjectHeader::New(::google::protobuf::Arena* arena) const {
  MeroObjectHeader* n = new MeroObjectHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MeroObjectHeader::Clear() {
  object_size_ = GOOGLE_ULONGLONG(0);
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MeroObjectHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s3server.MeroObjectHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 object_size = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &object_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s3server.MeroObjectHeader.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s3server.MeroObjectHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s3server.MeroObjectHeader)
  return false;
#undef DO_
}

void MeroObjectHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s3server.MeroObjectHeader)
  // optional fixed64 object_size = 1;
  if (this->object_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->object_size(), output);
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s3server.MeroObjectHeader.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:s3server.MeroObjectHeader)
}

::google::protobuf::uint8* MeroObjectHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s3server.MeroObjectHeader)
  // optional fixed64 object_size = 1;
  if (this->object_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->object_size(), target);
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s3server.MeroObjectHeader.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:s3server.MeroObjectHeader)
  return target;
}

int MeroObjectHeader::ByteSize() const {
  int total_size = 0;

  // optional fixed64 object_size = 1;
  if (this->object_size() != 0) {
    total_size += 1 + 8;
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeroObjectHeader::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MeroObjectHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MeroObjectHeader>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeroObjectHeader::MergeFrom(const MeroObjectHeader& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.object_size() != 0) {
    set_object_size(from.object_size());
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void MeroObjectHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeroObjectHeader::CopyFrom(const MeroObjectHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeroObjectHeader::IsInitialized() const {

  return true;
}

void MeroObjectHeader::Swap(MeroObjectHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeroObjectHeader::InternalSwap(MeroObjectHeader* other) {
  std::swap(object_size_, other->object_size_);
  version_.Swap(&other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MeroObjectHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeroObjectHeader_descriptor_;
  metadata.reflection = MeroObjectHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MeroObjectHeader

// optional fixed64 object_size = 1;
void MeroObjectHeader::clear_object_size() {
  object_size_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MeroObjectHeader::object_size() const {
  // @@protoc_insertion_point(field_get:s3server.MeroObjectHeader.object_size)
  return object_size_;
}
 void MeroObjectHeader::set_object_size(::google::protobuf::uint64 value) {
  
  object_size_ = value;
  // @@protoc_insertion_point(field_set:s3server.MeroObjectHeader.object_size)
}

// optional string version = 2;
void MeroObjectHeader::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MeroObjectHeader::version() const {
  // @@protoc_insertion_point(field_get:s3server.MeroObjectHeader.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MeroObjectHeader::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:s3server.MeroObjectHeader.version)
}
 void MeroObjectHeader::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:s3server.MeroObjectHeader.version)
}
 void MeroObjectHeader::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:s3server.MeroObjectHeader.version)
}
 ::std::string* MeroObjectHeader::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:s3server.MeroObjectHeader.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MeroObjectHeader::release_version() {
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MeroObjectHeader::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:s3server.MeroObjectHeader.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace s3server

// @@protoc_insertion_point(global_scope)
